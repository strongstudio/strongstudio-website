/*
*
* This is a simple system for generating your own responsive grids.
* Rather than creating a grid, these tools allow you to make your own grids as you need them.
* Responsive rules can be declared on a per-column or a per-row basis, as preferred.
*
*/

/*
*  Below is the column generator mixin.
*  The generated styles are percentage-based, and will scale to either the window or their parent element.
*  Rows can be given fixed widths in ems or pixels at various breakpoints for a stepwise responsive grid.
*  It takes three arguments -
*  $units: (the number of units the column will occupy)
*  $of-how-many: the number of units in the row, and
*  $gutters (optional): specifying the width of the gutters between columns.
*  gutter width should be given as a percentage. gutters are to the left, and omitted on the first child.
*  if no gutter width is specified, it defaults to the global value provided in "_variables.scss" as $gutter-width.
*/

/*
*  TODO - consider borders. in the current implementation borders would be pressed up against the col content. this might be fixed by switching to padding, and splitting the gutters between the cols.
*/

@mixin column($units, $of-how-many, $gutter: $gutter-width){
  width: (($units/$of-how-many)*100%);
  //margin-left: $gutter;
  margin: 0;
  padding-left: $gutter/2;
  padding-right: $gutter/2;
  //float: left;
  display: inline-block;
  box-sizing: border-box;
  &:first-child{
    margin-left: 0;
  }
}

.row{
  position: relative;
  font-size: 0;
  @include clearfix;

  .col{
    font-size: 1rem;
    margin-left: $gutter-width;
    &:first-child{
      margin-left: 0;
    }

    // Create columns occupying any number of units of a grid of any size using the @column mixin

    &.one-of-two{
      @include column(1, 2);
    }

    &.one-of-three{
      @include column(1, 3);
    }

    &.two-of-three{
      @include column(2, 3);
    }

    &.two-of-four{
      @include column(2, 4);
    }

    &.one-of-four{
      @include column(1, 4);
    }

    &.three-of-four{
      @include column(3, 4);
    }

    /* one way of using media queries on a per-column basis */
    @media only screen and (max-width: $tablet-width){
      &.med-full-width{
        width: 100%;
        margin-left: 0;
      }

      &.med-one-of-two{
        @include column(1,2);
        &:nth-child(2n+1){
          clear:both;
          margin-left: 0;
        }
      }
      &.med-one-of-three{
        @include column(1,3);
        &:nth-child(3n+1){
          clear:both;
          margin-left: 0;
        }
      }
      &.med-two-of-three{
        @include column(2,3);
        &:nth-child(3n+1){
          clear:both;
          margin-left: 0;
        }
      }
    }

  }
  /* another approach on a per-row basis */
  &.sm-single-col{
    @media only screen and (max-width: $phone-width){
      .col{
        width: 100% !important;
        margin-left: 0 !important;
      }
    }
  }

  &.med-single-col{
    @media only screen and (max-width: $tablet-width){
      .col{
        width: 100% !important;
        margin-left: 0 !important;
      }
    }
  }

  /* inline-block rows for top menus, etc. */

  &.inline-block{
    @include inline-block-justified;
    .col{
      margin-left: 0;
      &.one-of-two{
        @include column(1, 2);
      }
      &.one-of-three{
        @include column(1,3);
      }
      &.one-of-four{
        @include column(1,4);
      }
      &.three-of-four{
        @include column(3,4);
      }
    }
  }
}
